(schema evt

Detail:(obj doc:`Detail holds extra information for audits and translations.`
	Created?: time
	Arrived?: time
	Acct?:    uuid
	Extra?:   dict
)

Audit:(obj backup; doc:`Audit holds detailed information for a published revision.`
	Rev: (time pk;)
	_:   @Detail
)

Sig:(obj doc:`Sig is the event signature.`
	Top: str
	Key: str
)

Action:(obj doc:`
  Action is an unpublished event represented by a command string and argument map.
  It usually is a data operation on a record identified by a topic and primary key.`
	_:    @Sig
	Cmd:  str
	Arg?: dict
)

Event:(obj backup; doc:`Event is an action published to a ledger with revision and unique id.`
	ID:  (int pk; auto;)
	Rev: (time idx;)
	_:   @Action
	idx: ['top' 'key']
)

Trans:(obj doc:`Trans is an request to publish a list of actions for a base revision.`
	Base: time
	Acts: list|@Action
	_:    @Detail
)

Watch:(obj
	Top:  str
	Rev?: time
	IDs?: list|str
)

Update:(obj
	Rev: time
	Evs: list|@Event?
)

Meta: (func Rev:time    @Audit?)
Hist: (func @Sig        @Update?)
Pub:  (func @Trans      @Update?)
Sub:  (func List:list|@Watch @Update?)
Uns:  (func List:list|@Watch bool)
)
